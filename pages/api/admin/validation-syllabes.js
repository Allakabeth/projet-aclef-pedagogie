import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
)

export default async function handler(req, res) {
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'M√©thode non autoris√©e' })
    }

    try {
        const { 
            apprenantId, 
            texteId, 
            statistiques, 
            paniers, 
            motsTraites, 
            motsEnAttenteSonsComplexes, 
            motsEnAttenteResegmentation, 
            dateEnvoi 
        } = req.body

        if (!apprenantId || !statistiques) {
            return res.status(400).json({ error: 'Donn√©es manquantes' })
        }

        console.log(`üìã Validation syllabes re√ßue de l'apprenant ${apprenantId}`)
        console.log(`üìä Statistiques:`, statistiques)
        console.log(`üìÇ Paniers: ${paniers?.length || 0}`)
        console.log(`‚úÖ Mots trait√©s: ${motsTraites?.length || 0}`)
        console.log(`ü§î Sons complexes: ${motsEnAttenteSonsComplexes?.length || 0}`)
        console.log(`‚úÇÔ∏è √Ä resegmenter: ${motsEnAttenteResegmentation?.length || 0}`)

        // Cr√©er des signalements pour chaque mot √† resegmenter
        if (motsEnAttenteResegmentation && motsEnAttenteResegmentation.length > 0) {
            console.log(`üîß Cr√©ation de ${motsEnAttenteResegmentation.length} signalements de syllabification...`)
            
            for (const motObj of motsEnAttenteResegmentation) {
                const mot = motObj.contenu || motObj
                console.log(`üìù Cr√©ation signalement pour "${mot}"`)
                
                try {
                    // Obtenir la segmentation actuelle du syst√®me
                    const segmentationResponse = await fetch(`http://localhost:3000/api/syllabification/coupe-mots`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ mots: [mot] })
                    })
                    
                    let segmentationSysteme = [mot] // fallback
                    if (segmentationResponse.ok) {
                        const segData = await segmentationResponse.json()
                        segmentationSysteme = segData.syllabifications[mot] || [mot]
                    }
                    
                    // Cr√©er le signalement
                    const signalement = {
                        mot: mot,
                        segmentation_utilisateur: segmentationSysteme, // Segmentation actuelle du syst√®me
                        segmentation_systeme: segmentationSysteme, // M√™me chose pour l'instant
                        utilisateur: `Nina (${apprenantId})`,
                        date_signalement: new Date().toISOString(),
                        traite: false
                    }
                    
                    const { data, error } = await supabase
                        .from('signalements_syllabification')
                        .insert(signalement)
                        .select()
                    
                    if (error) {
                        if (error.code === '42P01') {
                            console.log(`üìù SIGNALEMENT CR√â√â (table inexistante):`)
                            console.log(`   Mot: "${mot}"`)
                            console.log(`   Segmentation: ${segmentationSysteme.join('-')}`)
                            console.log(`   Utilisateur: Nina (${apprenantId})`)
                        } else {
                            console.error(`Erreur signalement pour "${mot}":`, error)
                        }
                    } else {
                        console.log(`‚úÖ Signalement cr√©√© en BDD pour "${mot}"`)
                    }
                    
                } catch (signalError) {
                    console.error(`Erreur cr√©ation signalement pour "${mot}":`, signalError)
                }
            }
        }

        // Tenter d'ins√©rer la validation dans la base de donn√©es
        let validationSauvee = false
        
        try {
            const { data, error } = await supabase
                .from('validations_syllabes')
                .insert({
                    apprenant_id: apprenantId,
                    texte_id: texteId,
                    statistiques: statistiques,
                    paniers: paniers,
                    mots_traites: motsTraites,
                    mots_sons_complexes: motsEnAttenteSonsComplexes,
                    mots_resegmentation: motsEnAttenteResegmentation,
                    date_envoi: dateEnvoi,
                    traite: false
                })
                .select()

            if (error) {
                console.error('Erreur insertion validation:', error)
                
                // Si la table n'existe pas, log la validation et continuer
                if (error.code === '42P01') {
                    console.warn('‚ö†Ô∏è  Table validations_syllabes inexistante - validation logg√©e')
                    console.log(`üìù VALIDATION RE√áUE:`)
                    console.log(`   Apprenant: ${apprenantId}`)
                    console.log(`   Texte: ${texteId}`)
                    console.log(`   Stats:`, JSON.stringify(statistiques, null, 2))
                    console.log(`   Date: ${dateEnvoi}`)
                    
                    validationSauvee = false // Pas sauv√© en BDD mais logg√©
                } else {
                    throw error // Autre erreur, la propager
                }
            } else {
                validationSauvee = true
                console.log(`‚úÖ Validation syllabes sauvegard√©e en BDD pour apprenant ${apprenantId}`)
            }
        } catch (dbError) {
            console.error('Erreur base de donn√©es:', dbError)
            // Log la validation m√™me en cas d'erreur BDD
            console.log(`üìù VALIDATION D'URGENCE (erreur BDD):`)
            console.log(`   Apprenant: ${apprenantId}`)
            console.log(`   Texte: ${texteId}`)
            console.log(`   Stats:`, JSON.stringify(statistiques, null, 2))
            console.log(`   Date: ${dateEnvoi}`)
            validationSauvee = false
        }

        const message = validationSauvee 
            ? `Validation syllabes sauv√©e en base de donn√©es pour apprenant ${apprenantId}`
            : `Validation syllabes re√ßue et logg√©e pour apprenant ${apprenantId} (base de donn√©es non configur√©e)`

        console.log(`‚úÖ ${message}`)

        res.status(200).json({
            success: true,
            message: 'Validation envoy√©e avec succ√®s √† l\'administrateur',
            saved_to_db: validationSauvee
        })

    } catch (error) {
        console.error('Erreur traitement validation:', error)
        res.status(500).json({ error: 'Erreur serveur' })
    }
}