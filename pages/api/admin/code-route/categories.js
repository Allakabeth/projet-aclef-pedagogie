import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
)

export default async function handler(req, res) {
    try {
        switch (req.method) {
            case 'GET':
                return await handleGet(req, res)
            case 'POST':
                return await handlePost(req, res)
            case 'PUT':
                return await handlePut(req, res)
            case 'DELETE':
                return await handleDelete(req, res)
            default:
                return res.status(405).json({ error: 'M√©thode non autoris√©e' })
        }
    } catch (error) {
        console.error('Erreur API cat√©gories:', error)
        return res.status(500).json({ error: 'Erreur serveur' })
    }
}

// GET - R√©cup√©rer toutes les cat√©gories avec nombre de mots
async function handleGet(req, res) {
    try {
        const { data, error } = await supabase
            .from('vocabulaire_code_route')
            .select('categorie, emoji')

        if (error) {
            console.error('Erreur r√©cup√©ration cat√©gories:', error)
            return res.status(500).json({ error: 'Erreur r√©cup√©ration cat√©gories' })
        }

        // Regrouper par cat√©gorie et compter
        const categoriesMap = {}
        data.forEach(item => {
            if (!categoriesMap[item.categorie]) {
                categoriesMap[item.categorie] = {
                    nom: item.categorie,
                    emoji: item.emoji || 'üìù',
                    count: 0
                }
            }
            categoriesMap[item.categorie].count++
        })

        const categories = Object.values(categoriesMap).sort((a, b) =>
            a.nom.localeCompare(b.nom)
        )

        return res.status(200).json({
            success: true,
            categories
        })

    } catch (error) {
        console.error('Erreur GET cat√©gories:', error)
        return res.status(500).json({ error: 'Erreur serveur' })
    }
}

// POST - Cr√©er une nouvelle cat√©gorie
async function handlePost(req, res) {
    const { nom, emoji } = req.body

    if (!nom) {
        return res.status(400).json({ error: 'Nom de cat√©gorie manquant' })
    }

    try {
        // V√©rifier si la cat√©gorie existe d√©j√†
        const { data: existing } = await supabase
            .from('vocabulaire_code_route')
            .select('categorie')
            .eq('categorie', nom)
            .limit(1)

        if (existing && existing.length > 0) {
            return res.status(400).json({ error: 'Cette cat√©gorie existe d√©j√†' })
        }

        // Cr√©er un mot placeholder pour initialiser la cat√©gorie
        // (sera supprim√© quand l'admin ajoutera de vrais mots)
        const { data, error } = await supabase
            .from('vocabulaire_code_route')
            .insert([{
                categorie: nom,
                mot: '_placeholder_',
                definition_simple: 'Cat√©gorie vide - ajoutez des mots',
                emoji: emoji || 'üìù',
                ordre_categorie: 0
            }])
            .select()

        if (error) {
            console.error('Erreur cr√©ation cat√©gorie:', error)
            return res.status(500).json({ error: 'Erreur lors de la cr√©ation' })
        }

        return res.status(201).json({
            success: true,
            categorie: {
                nom,
                emoji: emoji || 'üìù',
                count: 1
            }
        })

    } catch (error) {
        console.error('Erreur POST cat√©gorie:', error)
        return res.status(500).json({ error: 'Erreur serveur' })
    }
}

// PUT - Renommer une cat√©gorie
async function handlePut(req, res) {
    const { ancien_nom, nouveau_nom, emoji } = req.body

    if (!ancien_nom || !nouveau_nom) {
        return res.status(400).json({ error: 'Noms manquants' })
    }

    try {
        // V√©rifier si le nouveau nom existe d√©j√†
        const { data: existing } = await supabase
            .from('vocabulaire_code_route')
            .select('categorie')
            .eq('categorie', nouveau_nom)
            .limit(1)

        if (existing && existing.length > 0 && ancien_nom !== nouveau_nom) {
            return res.status(400).json({ error: 'Ce nom de cat√©gorie existe d√©j√†' })
        }

        // Mettre √† jour tous les mots de la cat√©gorie
        const updates = { categorie: nouveau_nom }
        if (emoji !== undefined) updates.emoji = emoji

        const { data, error } = await supabase
            .from('vocabulaire_code_route')
            .update(updates)
            .eq('categorie', ancien_nom)
            .select()

        if (error) {
            console.error('Erreur renommage cat√©gorie:', error)
            return res.status(500).json({ error: 'Erreur lors du renommage' })
        }

        return res.status(200).json({
            success: true,
            nb_mots_modifies: data.length,
            categorie: {
                nom: nouveau_nom,
                emoji: emoji || data[0]?.emoji || 'üìù',
                count: data.length
            }
        })

    } catch (error) {
        console.error('Erreur PUT cat√©gorie:', error)
        return res.status(500).json({ error: 'Erreur serveur' })
    }
}

// DELETE - Supprimer une cat√©gorie
async function handleDelete(req, res) {
    const { nom } = req.query

    if (!nom) {
        return res.status(400).json({ error: 'Nom de cat√©gorie manquant' })
    }

    try {
        // Compter les mots dans la cat√©gorie
        const { data: mots, error: countError } = await supabase
            .from('vocabulaire_code_route')
            .select('id')
            .eq('categorie', nom)

        if (countError) {
            console.error('Erreur comptage mots:', countError)
        }

        const nbMots = mots?.length || 0

        // Supprimer tous les mots de la cat√©gorie
        const { error } = await supabase
            .from('vocabulaire_code_route')
            .delete()
            .eq('categorie', nom)

        if (error) {
            console.error('Erreur suppression cat√©gorie:', error)
            return res.status(500).json({ error: 'Erreur lors de la suppression' })
        }

        return res.status(200).json({
            success: true,
            message: 'Cat√©gorie supprim√©e avec succ√®s',
            nb_mots_supprimes: nbMots
        })

    } catch (error) {
        console.error('Erreur DELETE cat√©gorie:', error)
        return res.status(500).json({ error: 'Erreur serveur' })
    }
}
