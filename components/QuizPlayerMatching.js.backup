import { useState, useEffect } from 'react'
import { useRouter } from 'next/router'

export default function QuizPlayerMatching({ quiz, onComplete }) {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)
  const [userMatches, setUserMatches] = useState({}) // { rightId: leftId }
  const [showFeedback, setShowFeedback] = useState(false)
  const [score, setScore] = useState(0)
  const [isComplete, setIsComplete] = useState(false)
  const [draggedItem, setDraggedItem] = useState(null)
  const [dragOverTarget, setDragOverTarget] = useState(null)
  const [shuffledLeftColumn, setShuffledLeftColumn] = useState([])
  const [shuffledRightColumn, setShuffledRightColumn] = useState([])
  const router = useRouter()

  const questions = quiz.quiz_data?.questions || []
  const currentQuestion = questions[currentQuestionIndex]
  const totalQuestions = questions.length
  const progress = ((currentQuestionIndex + 1) / totalQuestions) * 100

  // Fonction pour m√©langer un tableau (Fisher-Yates shuffle)
  const shuffleArray = (array) => {
    const shuffled = [...array]
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]]
    }
    return shuffled
  }

  useEffect(() => {
    if (currentQuestion) {
      // M√©langer les colonnes s√©par√©ment d'abord
      const shuffledLeft = shuffleArray(currentQuestion.leftColumn || [])
      const shuffledRight = shuffleArray(currentQuestion.rightColumn || [])

      setShuffledLeftColumn(shuffledLeft)
      setShuffledRightColumn(shuffledRight)

      // Initialiser les associations vides
      const initialMatches = {}
      currentQuestion.rightColumn?.forEach(item => {
        initialMatches[item.id] = ''
      })
      setUserMatches(initialMatches)
    }
  }, [currentQuestionIndex, currentQuestion?.id])

  // M√©langer toutes les cartes ensemble pour affichage en grille
  const allCardsMixed = [...shuffledLeftColumn.map(item => ({ ...item, type: 'left' })), ...shuffledRightColumn.map(item => ({ ...item, type: 'right' }))]
  const shuffledAllCards = shuffleArray(allCardsMixed)

  // D√©marrer le drag
  const handleDragStart = (e, rightItem) => {
    if (showFeedback) return
    setDraggedItem(rightItem)
    e.dataTransfer.effectAllowed = 'move'
  }

  // Drag au-dessus d'une cible
  const handleDragOver = (e, leftItem) => {
    if (showFeedback) return
    e.preventDefault()
    e.dataTransfer.dropEffect = 'move'
    setDragOverTarget(leftItem.id)
  }

  // Quitter la zone de drop
  const handleDragLeave = () => {
    setDragOverTarget(null)
  }

  // D√©poser l'association
  const handleDrop = (e, leftItem) => {
    if (showFeedback) return
    e.preventDefault()

    if (draggedItem) {
      setUserMatches(prev => ({
        ...prev,
        [draggedItem.id]: leftItem.id
      }))
    }

    setDraggedItem(null)
    setDragOverTarget(null)
  }

  // Fin du drag
  const handleDragEnd = () => {
    setDraggedItem(null)
    setDragOverTarget(null)
  }

  // Supprimer une association
  const handleRemoveMatch = (rightId) => {
    if (showFeedback) return
    setUserMatches(prev => ({
      ...prev,
      [rightId]: ''
    }))
  }

  const handleValidate = () => {
    if (showFeedback) return

    // V√©rifier combien d'associations sont correctes
    let correctCount = 0
    currentQuestion.rightColumn?.forEach(rightItem => {
      if (userMatches[rightItem.id] === rightItem.matchWith) {
        correctCount++
      }
    })

    const isFullyCorrect = correctCount === currentQuestion.rightColumn?.length

    if (isFullyCorrect) {
      setScore(score + 1)
    }

    setShowFeedback(true)

    // Son de feedback
    try {
      const audioContext = new (window.AudioContext || window.webkitAudioContext)()
      const oscillator = audioContext.createOscillator()
      const gainNode = audioContext.createGain()

      oscillator.connect(gainNode)
      gainNode.connect(audioContext.destination)

      oscillator.frequency.setValueAtTime(isFullyCorrect ? 800 : 400, audioContext.currentTime)
      oscillator.type = 'sine'

      gainNode.gain.setValueAtTime(0.3, audioContext.currentTime)
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5)

      oscillator.start(audioContext.currentTime)
      oscillator.stop(audioContext.currentTime + 0.5)
    } catch (error) {
      console.log('Audio feedback non disponible')
    }

    // Passer √† la question suivante apr√®s 3 secondes
    setTimeout(() => {
      if (currentQuestionIndex < totalQuestions - 1) {
        setCurrentQuestionIndex(currentQuestionIndex + 1)
        setShowFeedback(false)
      } else {
        // Quiz termin√©
        setIsComplete(true)

        if (onComplete) {
          onComplete({
            score: isFullyCorrect ? score + 1 : score,
            totalQuestions: totalQuestions,
            percentage: Math.round(((isFullyCorrect ? score + 1 : score) / totalQuestions) * 100)
          })
        }

        setTimeout(() => {
          router.push({
            pathname: '/quizz/resultat',
            query: {
              quizId: quiz.id,
              quizTitle: quiz.title,
              score: isFullyCorrect ? score + 1 : score,
              total: totalQuestions,
              percentage: Math.round(((isFullyCorrect ? score + 1 : score) / totalQuestions) * 100)
            }
          })
        }, 1000)
      }
    }, 3000)
  }

  const allMatched = currentQuestion?.rightColumn?.every(item => userMatches[item.id])

  // Trouver quelle carte de droite est associ√©e √† une carte de gauche
  const getRightItemMatchedWith = (leftId) => {
    const rightId = Object.keys(userMatches).find(key => userMatches[key] === leftId)
    return shuffledRightColumn.find(r => r.id === rightId)
  }

  if (!currentQuestion) {
    return (
      <div style={{
        minHeight: '100vh',
        background: 'white',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        padding: '20px'
      }}>
        <div style={{ textAlign: 'center' }}>
          <div style={{ fontSize: '24px', marginBottom: '20px' }}>‚ùå Erreur</div>
          <p>Quiz non trouv√© ou sans questions</p>
          <button
            onClick={() => router.push('/quizz/index')}
            style={{
              marginTop: '20px',
              padding: '12px 24px',
              background: '#6b7280',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: 'bold'
            }}
          >
            ‚Üê Retour aux quiz
          </button>
        </div>
      </div>
    )
  }

  if (isComplete) {
    return (
      <div style={{
        minHeight: '100vh',
        background: 'white',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        padding: '20px'
      }}>
        <div style={{ textAlign: 'center' }}>
          <div style={{ fontSize: '48px', marginBottom: '20px' }}>üéâ</div>
          <h2 style={{ color: '#1f2937', marginBottom: '10px' }}>Quiz termin√© !</h2>
          <p style={{ color: '#6b7280' }}>Redirection vers vos r√©sultats...</p>
        </div>
      </div>
    )
  }

  return (
    <div style={{
      minHeight: '100vh',
      background: 'white',
      padding: '10px'
    }}>
      <div style={{
        maxWidth: '1100px',
        margin: '0 auto'
      }}>
        {/* Titre du quiz */}
        <h1 style={{
          fontSize: 'clamp(18px, 4vw, 22px)',
          fontWeight: 'bold',
          marginBottom: '6px',
          textAlign: 'center',
          color: '#1f2937'
        }}>
          {quiz.title}
        </h1>

        {/* Consigne */}
        {currentQuestion.text && (
          <p style={{
            textAlign: 'center',
            color: '#6b7280',
            fontSize: '13px',
            marginBottom: '8px'
          }}>
            {currentQuestion.text}
          </p>
        )}

        <p style={{
          textAlign: 'center',
          color: '#8b5cf6',
          fontSize: '14px',
          fontWeight: 'bold',
          marginBottom: '10px'
        }}>
          üñêÔ∏è Glissez les cartes vertes vers les cartes bleues
        </p>

        {/* Grille avec toutes les cartes m√©lang√©es */}
        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(4, 1fr)',
          gap: '8px',
          marginBottom: '10px'
        }}>
          {shuffledAllCards.map((card) => {
            if (card.type === 'left') {
              // Carte A (bleue) - Zone de drop
              const leftItem = card
              const isDragOver = dragOverTarget === leftItem.id
              const matchedRightItem = getRightItemMatchedWith(leftItem.id)
              const isCorrectMatch = showFeedback && matchedRightItem && matchedRightItem.matchWith === leftItem.id
              const isIncorrectMatch = showFeedback && matchedRightItem && matchedRightItem.matchWith !== leftItem.id

              return (
              const isDragOver = dragOverTarget === leftItem.id
              const matchedRightItem = getRightItemMatchedWith(leftItem.id)
              const isCorrectMatch = showFeedback && matchedRightItem && matchedRightItem.matchWith === leftItem.id
              const isIncorrectMatch = showFeedback && matchedRightItem && matchedRightItem.matchWith !== leftItem.id

              return (
                <div
                  key={leftItem.id}
                  onDragOver={(e) => handleDragOver(e, leftItem)}
                  onDragLeave={handleDragLeave}
                  onDrop={(e) => handleDrop(e, leftItem)}
                  style={{
                    padding: '10px',
                    background: isDragOver ? '#dbeafe' : isCorrectMatch ? '#d1fae5' : isIncorrectMatch ? '#fee2e2' : '#eff6ff',
                    border: `2px ${isDragOver ? 'dashed' : 'solid'} ${isCorrectMatch ? '#10b981' : isIncorrectMatch ? '#ef4444' : '#3b82f6'}`,
                    borderRadius: '8px',
                    marginBottom: '6px',
                    minHeight: '45px',
                    transition: 'all 0.2s ease',
                    transform: isDragOver ? 'scale(1.02)' : 'scale(1)',
                    cursor: showFeedback ? 'default' : 'pointer'
                  }}
                >
                  <div style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px',
                    marginBottom: matchedRightItem && !showFeedback ? '8px' : '0'
                  }}>
                    <span style={{
                      width: '28px',
                      height: '28px',
                      background: '#3b82f6',
                      color: 'white',
                      borderRadius: '50%',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontWeight: 'bold',
                      fontSize: '13px',
                      flexShrink: 0
                    }}>
                      {leftItem.id.toUpperCase()}
                    </span>
                    <span style={{
                      fontSize: '13px',
                      color: '#1f2937',
                      fontWeight: '500',
                      lineHeight: '1.2'
                    }}>
                      {leftItem.text}
                    </span>
                  </div>

                  {/* Carte B coll√©e dans la carte A */}
                  {matchedRightItem && !showFeedback && (
                    <div style={{
                      marginTop: '8px',
                      padding: '8px',
                      background: '#10b981',
                      borderRadius: '6px',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '6px',
                      animation: 'slideIn 0.3s ease'
                    }}>
                      <span style={{
                        width: '22px',
                        height: '22px',
                        background: '#fff',
                        color: '#10b981',
                        borderRadius: '50%',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        fontWeight: 'bold',
                        fontSize: '11px',
                        flexShrink: 0
                      }}>
                        {matchedRightItem.id}
                      </span>
                      <span style={{
                        fontSize: '12px',
                        color: 'white',
                        fontWeight: '600',
                        flex: 1,
                        lineHeight: '1.2'
                      }}>
                        {matchedRightItem.text}
                      </span>
                      <button
                        onClick={() => handleRemoveMatch(matchedRightItem.id)}
                        style={{
                          background: '#fff',
                          color: '#ef4444',
                          border: 'none',
                          borderRadius: '50%',
                          width: '20px',
                          height: '20px',
                          cursor: 'pointer',
                          fontSize: '12px',
                          fontWeight: 'bold',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center'
                        }}
                      >
                        ‚úï
                      </button>
                    </div>
                  )}

                  {/* Feedback apr√®s validation */}
                  {showFeedback && matchedRightItem && (
                    <div style={{
                      marginTop: '6px',
                      padding: '6px',
                      background: isCorrectMatch ? '#d1fae5' : '#fef2f2',
                      borderRadius: '4px',
                      fontSize: '11px',
                      fontWeight: 'bold',
                      color: isCorrectMatch ? '#065f46' : '#991b1b',
                      lineHeight: '1.2'
                    }}>
                      {isCorrectMatch ? (
                        `‚úÖ Correct ! ${matchedRightItem.id} ‚Üî ${leftItem.id.toUpperCase()}`
                      ) : (
                        `‚ùå Incorrect. ${matchedRightItem.id} devrait √™tre avec ${matchedRightItem.matchWith.toUpperCase()}`
                      )}
                    </div>
                  )}
                </div>
              )
            })}
          </div>

          {/* Colonne B (droite) - √âL√âMENTS DRAGGABLES */}
          <div>
            {shuffledRightColumn.map((rightItem) => {
              const isCorrect = showFeedback && userMatches[rightItem.id] === rightItem.matchWith
              const isIncorrect = showFeedback && userMatches[rightItem.id] && userMatches[rightItem.id] !== rightItem.matchWith
              const isDragging = draggedItem?.id === rightItem.id
              const hasMatch = userMatches[rightItem.id]

              return (
                <div
                  key={rightItem.id}
                  draggable={!showFeedback && !hasMatch}
                  onDragStart={(e) => handleDragStart(e, rightItem)}
                  onDragEnd={handleDragEnd}
                  style={{
                    padding: '10px',
                    background: isCorrect ? '#d1fae5' : isIncorrect ? '#fee2e2' : hasMatch ? '#f3f4f6' : '#f0fdf4',
                    border: `2px solid ${isCorrect ? '#10b981' : isIncorrect ? '#ef4444' : hasMatch ? '#d1d5db' : '#10b981'}`,
                    borderRadius: '8px',
                    marginBottom: '6px',
                    cursor: showFeedback || hasMatch ? 'default' : 'grab',
                    opacity: isDragging ? 0.5 : hasMatch && !showFeedback ? 0.4 : 1,
                    transform: isDragging ? 'scale(0.95)' : 'scale(1)',
                    transition: 'all 0.2s ease',
                    position: 'relative',
                    minHeight: '45px'
                  }}
                >
                  <div style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px'
                  }}>
                    <span style={{
                      width: '28px',
                      height: '28px',
                      background: isCorrect ? '#10b981' : isIncorrect ? '#ef4444' : hasMatch ? '#9ca3af' : '#10b981',
                      color: 'white',
                      borderRadius: '50%',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontWeight: 'bold',
                      fontSize: '13px',
                      flexShrink: 0
                    }}>
                      {rightItem.id}
                    </span>
                    <span style={{
                      fontSize: '13px',
                      color: hasMatch && !showFeedback ? '#9ca3af' : '#1f2937',
                      fontWeight: '500',
                      flex: 1,
                      lineHeight: '1.2'
                    }}>
                      {rightItem.text}
                    </span>
                  </div>

                  {/* Message quand la carte est utilis√©e */}
                  {hasMatch && !showFeedback && (
                    <div style={{
                      marginTop: '6px',
                      fontSize: '10px',
                      color: '#6b7280',
                      fontStyle: 'italic',
                      textAlign: 'center'
                    }}>
                      ‚úì Associ√©e
                    </div>
                  )}

                  {/* Feedback apr√®s validation */}
                  {showFeedback && (
                    <div style={{
                      marginTop: '6px',
                      padding: '6px',
                      background: isCorrect ? '#d1fae5' : '#fef2f2',
                      borderRadius: '4px',
                      fontSize: '11px',
                      fontWeight: 'bold',
                      color: isCorrect ? '#065f46' : '#991b1b',
                      lineHeight: '1.2'
                    }}>
                      {isCorrect ? (
                        '‚úÖ Correct !'
                      ) : (
                        <>
                          ‚ùå Incorrect. Bonne r√©ponse : {rightItem.matchWith.toUpperCase()} - {
                            shuffledLeftColumn.find(l => l.id === rightItem.matchWith)?.text
                          }
                        </>
                      )}
                    </div>
                  )}
                </div>
              )
            })}
          </div>
        </div>

        {/* Bouton valider */}
        {!showFeedback && (
          <div style={{ textAlign: 'center', marginTop: '10px' }}>
            <button
              onClick={handleValidate}
              disabled={!allMatched}
              style={{
                padding: '10px 30px',
                background: allMatched ? '#10b981' : '#9ca3af',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                fontSize: '14px',
                fontWeight: 'bold',
                cursor: allMatched ? 'pointer' : 'not-allowed',
                transition: 'all 0.2s ease'
              }}
            >
              {allMatched ? '‚úÖ Valider mes r√©ponses' : '‚è≥ Compl√©tez toutes les associations'}
            </button>
          </div>
        )}

        {/* Feedback global */}
        {showFeedback && (
          <div style={{
            textAlign: 'center',
            marginTop: '10px',
            padding: '10px',
            background: '#e0f2fe',
            borderRadius: '6px',
            border: '2px solid #0ea5e9'
          }}>
            <div style={{ fontSize: '13px', color: '#0c4a6e' }}>
              {currentQuestionIndex < totalQuestions - 1 ?
                '‚è≥ Question suivante dans 3 secondes...' :
                'üéØ Calcul de vos r√©sultats...'
              }
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
